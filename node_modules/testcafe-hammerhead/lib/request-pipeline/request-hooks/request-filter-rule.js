'use strict';

exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _url = require('../../utils/url');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DEFAULT_OPTIONS = {
    url: void 0,
    method: void 0,
    isAjax: void 0
};

var MATCH_ANY_REQUEST_REG_EX = /.*/;

var RequestFilterRule = function () {
    function RequestFilterRule(options) {
        _classCallCheck(this, RequestFilterRule);

        this.options = this._initializeOptions(options);
    }

    RequestFilterRule.prototype._initializeOptions = function _initializeOptions(options) {
        var tmpOptions = Object.assign({}, DEFAULT_OPTIONS);

        if (typeof options === 'string' || (0, _lodash.isRegExp)(options)) tmpOptions.url = options;else if (typeof options === 'function') tmpOptions = options;else if (typeof options === 'object') tmpOptions = Object.assign(tmpOptions, options);else throw new TypeError('Wrong options have been passed to a request filter.');

        if (typeof tmpOptions.method === 'string') tmpOptions.method = tmpOptions.method.toLowerCase();

        return tmpOptions;
    };

    RequestFilterRule.prototype._matchUrl = function _matchUrl(optionValue, checkedValue) {
        if (optionValue === void 0) return true;

        if (typeof optionValue === 'string') {
            optionValue = (0, _url.ensureOriginTrailingSlash)(optionValue);

            return optionValue === checkedValue;
        } else if ((0, _lodash.isRegExp)(optionValue)) return optionValue.test(checkedValue);

        return false;
    };

    RequestFilterRule.prototype._matchMethod = function _matchMethod(optionValue, checkedValue) {
        if (optionValue === void 0) return true;

        if (typeof optionValue === 'string') return optionValue === checkedValue;

        return false;
    };

    RequestFilterRule.prototype._matchIsAjax = function _matchIsAjax(optionValue, checkedValue) {
        if (optionValue === void 0) return true;

        if (typeof optionValue === 'boolean') return optionValue === checkedValue;

        return false;
    };

    RequestFilterRule.prototype._matchUsingObjectOptions = function _matchUsingObjectOptions(requestInfo) {
        return this._matchUrl(this.options.url, requestInfo.url) && this._matchMethod(this.options.method, requestInfo.method) && this._matchIsAjax(this.options.isAjax, requestInfo.isAjax);
    };

    RequestFilterRule.prototype._matchUsingFunctionOptions = function _matchUsingFunctionOptions(requestInfo) {
        return !!this.options.call(this, requestInfo);
    };

    RequestFilterRule.prototype.match = function match(requestInfo) {
        if (typeof this.options === 'function') return this._matchUsingFunctionOptions(requestInfo);

        return this._matchUsingObjectOptions(requestInfo);
    };

    _createClass(RequestFilterRule, null, [{
        key: 'ANY',
        get: function get() {
            return new RequestFilterRule(MATCH_ANY_REQUEST_REG_EX);
        }
    }]);

    return RequestFilterRule;
}();

exports.default = RequestFilterRule;
module.exports = exports['default'];